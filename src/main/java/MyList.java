/**
 * Типизированный кастомный ArrayList
 * <p>
 * Основана на динамическом массиве с начальной емкостью по умолчанию = 16, если не указано иное
 * </p>
 * Помимо дефолтного пустого конструктора так же имеет конструкторы, принимающие:
 *  - (компаратор для элементов коллекции)
 *  - (начальную емкость)
 *  - (начальную емкость, компаратор для элементов коллекции)
 * <p>
 * В случае, если компаратор не передан, сортировка будет производиться по дефолтному компаратору,
 * сравнивающему элементы по хэшу.
 * </p>
 * Не поддерживает Null элементы ради простоты реализации проверок и сортировки.
 * В случае попытки добавления null элемента выбрасывает UnsupportedOperationException
 * <p>
 * Выбрасывает ArrayIndexOutOfBoundsException в случае добавления элемента за пределы активного массива
 * </p>
 * Для сортировки используется неустойчивый алгоритм QuickSort с теоретической возможностью
 * деградации скорости сортировки до O(n^2) в зависимости от исходных данных, а так же вспомогательный
 * алгоритм InsertionSort для сортировок микро-массивов в процессе выполнения самого QuickSort.
 * Хотел написать устойчивый алгоритм через использование медианы, но чет не сложилось (застрял
 * на вычислении медианы среди группы объектов), по этому пока так.
 *
 * @param <T> - любой класс
 */
public interface MyList<T> {

    /**
     * Добавляет элемент Типа в коллекцию
     * @param element - добавляемый элемент
     */
    void add(T element);

    /**
     * добавляет элемент Типа в коллекцию на позицию index
     * может выбрасывать ArrayIndexOutOfBoundsException в случае попытки добавления
     * элемента по несуществующему индексу
     * @param index - индекс добавления
     * @param element - добавляемый элемент
     */
    void add(int index, T element);

    /**
     * получает элемент Типа с позиции index
     * может выбрасывать ArrayIndexOutOfBoundsException в случае попытки получения
     * элемента по несуществующему индексу
     * @param index - индекс получения
     * @return элемент Типа
     */
    T get(int index);

    /**
     * удаляет элемент Типа из коллекции
     * может выбрасывать ArrayIndexOutOfBoundsException в случае попытки получения
     * элемента по несуществующему индексу
     * @param index - индекс удаления
     * @return элемент Типа
     */
    T remove(int index);

    /**
     * Заменяет элемент по индексу на новый
     * может выбрасывать ArrayIndexOutOfBoundsException в случае попытки получения
     * элемента по несуществующему индексу
     * @param index - индекс замены
     * @param element - заменяющий элемент
     */
    void replace(int index, T element);

    /**
     * Удаляет элемент, если таковой существует в коллекции
     * @param element - удаляемый элемент
     * @return - результат выполнения
     */
    boolean remove(T element);

    /**
     * Полностью очищает коллекцию
     */
    void clear();

    /**
     * Сортирует коллекцию с использованием переданного или внутреннего компаратора.
     */
    void sort();

    /**
     * Возвращает размер коллекции
     * @return
     */
    int size();

    /**
     * Проверяет наличие элемента в коллекции
     * @param element - искомый элемент
     * @return - результат выполнения операции
     */
    boolean contains(T element);
}
